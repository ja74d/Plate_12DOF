import numpy as np

E = 1
h = 1
a = 3
b = 2
nu = 1/3
rho = a/b

K_e = np.zeros((8, 8))

# stiffness matrix components

F = (( 42 - 12*nu + 60*(rho**2) + 60*(rho**-2) )*(h**2))/( a*b )
G = (( 32*rho + 3*(rho**-1) +12*nu*(rho**-1) )*( h**2 ))/( b )
H = (( 30*(rho**-1) + 3*rho + 12*nu*rho )*( h**2 ))/( a )
L = (( -42 + 12*nu -60*(rho**-2) + 30*(rho**2) )*( h**2 ))/( a*b )
M = (( -15*rho + 30*(rho**-1) + 12*(rho**-1) )*(h**2))/(b)
N = (( 30*(rho**-1) + 3*(1-nu)*rho )*( h**2 ))/( a )
O = (( 42 - 12*nu - 30*(rho**2) -30*(rho**-2) )*( h**2 ))/( a*b )
P = (( -15*rho +3*(1-nu)*(rho**-1) )*( h**2 ))/( b )
Q = (( 15*(rho**-1) - 3*(1-nu)*rho )*( h**2 ))/( a )
I = (( -42 + 12*nu -60*(rho**2) + 30*(rho**-2) )*( h**2 ))/( a*b )
J = (( 30*rho + 3*(1-nu)*(rho**-1) )*( h**2 ))/( b )
K = (( 15*(rho**-1) - 3*rho - 12*nu*rho )*( h**2 ))/( a )
R = ( 20*rho + 4*(1-nu)*(rho**-1) )*(h**2)
Z = 15*nu*h**2
T = ( 10*rho - 4*(1-nu)*(rho**-1) )*( h**2 )
phi = K_e[1, 5] = K_e[5, 1] = 0
U = ( 5*rho + (1-nu)*(rho**-1) )*( h**2 )
S = ( 10*rho - (1-nu)*(rho**-1) )*( h**2 )
V = ( 20*(rho**-1) + 4*(1-nu)*rho )*(h**2)
X = ( 10*(rho**-1) - (1-nu)*rho )*( h**2 )
Y = ( 5*(rho**-1) + (1-nu)*rho )*(h**2)
W = ( 10*(rho**-1) - 4*(1-nu)*rho )*(h**2)

K_e[0, 0] = F
K_e[0, 1] = K_e[1, 0] = L
K_e[0, 2] = K_e[2, 0] = N
K_e[0, 3] = K_e[3, 0] = I
K_e[0, 4] = K_e[4, 0] = -J
K_e[0, 5] = K_e[5, 0] = O
K_e[0, 6] = K_e[6, 0] = Q
K_e[0, 7] = K_e[7, 0] = P

K_e[1, 1] = 2*F
K_e[1, 2] = K_e[2, 1] = 0
K_e[1, 3] = K_e[3, 1] = O
K_e[1, 4] = K_e[4, 1] = P
K_e[1, 5] = K_e[5, 1] = 2*I
K_e[1, 6] = K_e[6, 1] = 0
K_e[1, 7] = K_e[7, 1] = -2*J

K_e[2, 2] = 2*V
K_e[2, 3] = K_e[3, 2] = Q
K_e[2, 4] = K_e[4, 2] = 0
K_e[2, 5] = K_e[5, 2] = 0
K_e[2, 6] = K_e[6, 2] = 2*W
K_e[2, 7] = K_e[7, 2] = 0

K_e[3, 3] = 2*F
K_e[3, 4] = K_e[4, 3] = 0
K_e[3, 5] = K_e[5, 3] = 2*L
K_e[3, 6] = K_e[6, 3] = 2*N
K_e[3, 7] = K_e[7, 3] = 0

K_e[4, 4] = 2*R
K_e[4, 5] = K_e[5, 4] = 0
K_e[4, 6] = K_e[6, 4] = 0
K_e[4, 7] = K_e[7, 4] = 2*T

K_e[5, 5] = 4*F
K_e[5, 6] = K_e[6, 5] = 0
K_e[5, 7] = K_e[7, 5] =0

K_e[6, 6] = 4*V
K_e[6, 7] = K_e[7, 6] = 0

K_e[7, 7] = 4*R

K_e = (E*h)/(180*(1-(nu**2)))*K_e

P_e = np.array([ [25], [0], [0], [0], [0], [0], [0], [0] ])
#P_e[0, 0] = 25
#P_e[5, 0] = 0
#print(K_e)
#print(P_e)
Kinv = np.linalg.inv(K_e)
print(Kinv@P_e)